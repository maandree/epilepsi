# Keywords:
#   use  : The OPTION to use
#   END  : The end of something that is in uppercase
#   yes  : Boolean value : true
#   no   : Boolean value : false
#   null : Not definied


# Timezone settings
# 
# utc : Whether to use always use UTC, otherwise, always local timezone
SETTING timezone
  utc = no
END


# How to combine time and date
# 
# datetime : The format with which to print time and date
# 
# %D = date
# %T = time
SETTING time_date
  use "date time"

  OPTION "date time"
    datetime = "%D %T"
  END
  OPTION "time date"
    datetime = "%T %D"
  END
END


# How to print dates in short form
# 
# month : The name of the months, in short form
# day   : The name of the week days, in short form
# date  : The format with which to print dates in short form
# 
# %y = year
# %m = month (index)
# %m = month (name)
# %d = day
# %V = ISO week number
# %W = week number of your
# %w = day of the week (index)
# %D = day of the week (name)
SETTING short_date
  use "yyyy-(mm)MMM-dd"

  month[1] = "Jan"
  month[2] = "Feb"
  month[3] = "Mar"
  month[4] = "Apr"
  month[5] = "May"
  month[6] = "Jun"
  month[7] = "Jul"
  month[8] = "Aug"
  month[9] = "Sep"
  month[10] = "Oct"
  month[11] = "Nov"
  month[12] = "Dec"

  day[1] = "Mon"
  day[2] = "Tue"
  day[3] = "Wed"
  day[4] = "Thu"
  day[5] = "Fri"
  day[6] = "Sat"
  day[7] = "Sun"

  OPTION "yyyy-(mm)MMM-dd"
    date = "%3y-(%2m)%M-%2d"
  END
  OPTION "yyyy-MMM-dd"
    date = "%3y-%M-%2d"
  END
  OPTION "yyyy-mm-dd"
    date = "%3y-%2m-%2d"
  END
  OPTION "yymmdd"
    date = "%{2y%100}%2m%2d"
  END
  OPTION "dd-(mm)MMM-yyyy"
    date = "%2d-(%2m)%M-%3y"
  END
  OPTION "dd-MMM-yyyy"
    date = "%2d-%M-%3y"
  END
  OPTION "dd-mm-yyyy"
    date = "%2d-%2m-%3y"
  END
  OPTION "ddmmyy"
    date = "%2d%2m%{2y%100}"
  END
  OPTION "mm-dd-yyyy"
    date = "%2m-%2d-%3y"
  END
  OPTION "mmddyy"
    date = "%2m%2d%{2y%100}"
  END
  OPTION "mm.dd.yy"
    date = "%2m.%2d.%{2y%100}"
  END
END


# How to print dates in long form
# 
# month : The name of the months, in long form
# day   : The name of the week days, in long form
# date  : The format with which to print dates in long form
# 
# %y = year
# %m = month (index)
# %m = month (name)
# %d = day
# %V = ISO week number
# %W = week number of your
# %w = day of the week (index)
# %D = day of the week (name)
SETTING long_date
  use "use short time"

  month[1] = "January"
  month[2] = "February"
  month[3] = "March"
  month[4] = "April"
  month[5] = "May"
  month[6] = "June"
  month[7] = "Jule"
  month[8] = "August"
  month[9] = "Sepember"
  month[10] = "Octember"
  month[11] = "November"
  month[12] = "December"

  day[1] = "Monday"
  day[2] = "Tuesday"
  day[3] = "Wednesday"
  day[4] = "Thursay"
  day[5] = "Friday"
  day[6] = "Saturday"
  day[7] = "Sunday"

  OPTION "dd MMMM yyyy"
    date = "%2d %M %1y"
  END
  OPTION "MMMM dd yyyy"
    date = "%M %2d %1y"
  END
  OPTION "use short time"
    date = null
  END
END


# Calendar settings
# 
# first_day : The first day of the week (Monday = 1, Sunday = 7)
# day       : The name of the week days, in very short form
SETTING calendar
  first_day = 1

  day[1] = "M"
  day[2] = "T"
  day[3] = "W"
  day[4] = "T"
  day[5] = "F"
  day[6] = "S"
  day[7] = "S"
END


# How to print clock times
# 
# repeat_no   : %r for times that only occurs once in a day
# repeat_pre  : %r for times that occurs twice (due to timezone change), the first time
# repeat_post : %r for times that occurs twice (due to timezone change), the second time
# end_of_day  : How to print the time 24:00
# time        : How to print times with seconds
# time_lax    : How to print times without seconds
# 
# %h = hour
# %m = minute
# %s = second
# %r = repeat
SETTING timekeeping
  use "24-hour clock"

  repeat_no = ""
  repeat_pre = "'"
  repeat_post = "''"

  OPTION "24-hour clock"
    end_of_day = "24:00"
    time[0..23] = "%2h:%2m:%2s%r"
    time_lax[0..23] = "%2h:%2m%r"
  END
  OPTION "Common 12-hour clock"
    end_of_day = "12 midnight"
    time[0..0] = "12:%2m:%2s%r a.m."
    time[1..11] = "%1h:%2m:%2s%r a.m."
    time[12..12] = "12:%2m:%2s%r p.m."
    time[13..13] = "%{1h-12}:%2m:%2s%r p.m."
    time_lax[0..0] = "12:%2m%r a.m."
    time_lax[1..11] = "%1h:%2m%r a.m."
    time_lax[12..12] = "12:%2m%r p.m."
    time_lax[13..13] = "%{1h-12}:%2m%r p.m."
  END
  OPTION "Japanese 12-hour clock"
    end_of_day = "12:00 p.m."
    time[0..12] = "%2h:%2m:%2s%r a.m."
    time[13..23] = "%{2h-12}:%2m:%2s%r p.m."
    time_lax[0..12] = "%2h:%2m%r a.m."
    time_lax[13..23] = "%{2h-12}:%2m%r p.m."
  END
END


# How to print elapsed time
# 
# elapsed   : How to print the amount of time elapsed from the start time
# countdown : How to print the amount of time remaining form the end time
# procent   : How to print the amount of time elapsed relative to the duration
# 
# %w = weeks
# %d = days
# %h = hours
# %m = minutes
# %s = seconds
# %p = procents, integer part
# %P = procents, float part
SETTING time
  SECTION "time"
    use "mm:ss"

    OPTION "m'ss''"
      elapsed[0,s] = "0'%2s''"
      elapsed[0,m] = "%1m'%2s''"
      elapsed[0,h] = "1%h %1m'%2s''"
      elapsed[0,d] = "%1dd %1h %1m'%2s''"
      elapsed[0,w] = "%1ww %1dd %1h %1m'%2s''"

      elapsed[$0,s] = "0'%2s.%{$0S[$0]}''"
      elapsed[$0,m] = "%1m'%2s.%{$0S[$0]}''"
      elapsed[$0,h] = "1%h %1m'%2s.%{$0S[$0]}''"
      elapsed[$0,d] = "%1dd %1h %1m'%2s.%{$0S[$0]}''"
      elapsed[$0,w] = "%1ww %1dd %1h %1m'%2s.%{$0S[$0]}''"

      countdown[0,s] = "−0'%2s''"
      countdown[0,m] = "−%1m'%2s''"
      countdown[0,h] = "−1%h %1m'%2s''"
      countdown[0,d] = "−%1dd %1h %1m'%2s''"
      countdown[0,w] = "−%1ww %1dd %1h %1m'%2s''"

      countdown[$0,s] = "−0'%2s.%{$0S[$0]}''"
      countdown[$0,m] = "−%1m'%2s.%{$0S[$0]}''"
      countdown[$0,h] = "−1%h %1m'%2s.%{$0S[$0]}''"
      countdown[$0,d] = "−%1dd %1h %1m'%2s.%{$0S[$0]}''"
      countdown[$0,w] = "−%1ww %1dd %1h %1m'%2s.%{$0S[$0]}''"
    END
    OPTION "mm:ss"
      elapsed[0,s] = "00:%2s"
      elapsed[0,m] = "%2m:%2s"
      elapsed[0,h] = "%2h:%2m:%2s"
      elapsed[0,d] = "%1dd%2h:%2m:%2s"
      elapsed[0,w] = null

      elapsed[$0,s] = "00:%2s.%{$0S[$0]}"
      elapsed[$0,m] = "%2m:%2s.%{$0S[$0]}"
      elapsed[$0,h] = "%2h:%2m:%2s.%{$0S[$0]}"
      elapsed[$0,d] = "%1dd%2h:%2m:%2s.%{$0S[$0]}"
      elapsed[$0,w] = null

      countdown[0,s] = "−00:%2s"
      countdown[0,m] = "−%2m:%2s"
      countdown[0,h] = "−%2h:%2m:%2s"
      countdown[0,d] = "−%1dd%2h:%2m:%2s"
      countdown[0,w] = null

      countdown[$0,s] = "−00:%2s.%{$0S[$0]}"
      countdown[$0,m] = "−%2m:%2s.%{$0S[$0]}"
      countdown[$0,h] = "−%2h:%2m:%2s.%{$0S[$0]}"
      countdown[$0,d] = "−%1dd%2h:%2m:%2s.%{$0S[$0]}"
      countdown[$0,w] = null
    END
  END

  SECTION "procent"
    use "0,123 %"

    OPTION "0,123 %"
      procent[0] = "%{1p[100]} %%"
      procent[$0] = "%{1p[100]},%{$0P[100,$0]} %%"
    END
    OPTION "0.123 %"
      procent[0] = "%{1p[100]} %%"
      procent[$0] = "%{1p[100]}.%{$0P[100,$0]} %%"
    END
    OPTION ".123 %"
      procent[0] = "%{1p[100]} %%"
      procent[$0] = "%{0p[100]}.%{$0P[100,$0]} %%"
    END
    OPTION "0,123%"
      procent[0] = "%{1p[100]}%%"
      procent[$0] = "%{1p[100]},%{$0P[100,$0]}%%"
    END
    OPTION "0.123%"
      procent[0] = "%{1p[100]}%%"
      procent[$0] = "%{1p[100]}.%{$0P[100,$0]}%%"
    END
    OPTION ".123%"
      procent[0] = "%{1p[100]}%%"
      procent[$0] = "%{0p[100]}.%{$0P[100,$0]}%%"
    END
  END
END


# How to print durations
# 
# duration : How to print durations
# 
# %w = weeks
# %d = days
# %h = hours
# %m = minutes
# %s = seconds
SETTING duration
  use "mm:ss"

  OPTION "m'ss''"
    duration[0,s] = "0'%2s''"
    duration[0,m] = "%1m'%2s''"
    duration[0,h] = "1%h %1m'%2s''"
    duration[0,d] = "%1dd %1h %1m'%2s''"
    duration[0,w] = "%1ww %1dd %1h %1m'%2s''"

    duration[$0,s] = "0'%2s.%{$0S[$0]}''"
    duration[$0,m] = "%1m'%2s.%{$0S[$0]}''"
    duration[$0,h] = "1%h %1m'%2s.%{$0S[$0]}''"
    duration[$0,d] = "%1dd %1h %1m'%2s.%{$0S[$0]}''"
    duration[$0,w] = "%1ww %1dd %1h %1m'%2s.%{$0S[$0]}''"
  END
  OPTION "mm:ss"
    duration[0,s] = "00:%2s"
    duration[0,m] = "%2m:%2s"
    duration[0,h] = "%2h:%2m:%2s"
    duration[0,d] = "%1dd%2h:%2m:%2s"
    duration[0,w] = null

    duration[$0,s] = "00:%2s.%{$0S[$0]}"
    duration[$0,m] = "%2m:%2s.%{$0S[$0]}"
    duration[$0,h] = "%2h:%2m:%2s.%{$0S[$0]}"
    duration[$0,d] = "%1dd%2h:%2m:%2s.%{$0S[$0]}"
    duration[$0,w] = null
  END
END


# Settings for the timebar
# 
# presistent  : Whether changes made in the program are saved
# left        : The element (by index) to use in `left_cycle`
# right       : The element (by index) to use in `right_cycle`
# bar         : The element (by index) to use in `bar_cycle`
# left_cycle  : Cycle of display styles that can be shown left to the timebar
# right_cycle : Cycle of display styles that can be shown right to the timebar
# bar_cycle   : Cycle of display styles that can be shown on to the timebar
SETTING timebar
  presistent = no
  
  left = 0
  right = 0
  bar = 1
  
  left_cycle = ("elapsed[0]", "countdown[0]", null)
  right_cycle = ("duration[0]", "countdown[0]", null)
  bar_cycle = ("procent[0]", "procent[1]", null)
END


# How to print A out of B
# 
# votes : The print format
# 
# %c = count
# %t = total
# %p = procents (integer part)
# %P = procents (float part)
SETTING outof
  use "c of t"

  OPTION "c of t"
    votes = "%c of %t"
  END
  OPTION "c / t"
    votes = "%c / %t"
  END
  OPTION "procent"
    votes = "%{1p[100]}.%{1P[100,1]} %%"
  END
  OPTION "procent without space"
    votes = "%{1p[100]}.%{1P[100,1]}%%"
  END
END


# How to print integers
# 
# radix    : The digits to use
# group    : The size of digit groups
# space    : The characters to put between groups
# zero     : How to print the value zero
# positive : How to print positive values
# negative : How to print negative values
# 
# %i = integer part
# %P = as if positive
SETTING integer
  radix = "0123456789"

  SECTION "grouping"
    use "spaces between groups of 3"
    OPTION "spaces between groups of 3"
      group = 3
      space = " "
    END
    OPTION "apostrophe between groups of 3"
      group = 3
      space = "'"
    END
    OPTION "comma between groups of 3"
      group = 3
      space = ","
    END
    OPTION "ungrouped"
      group = 0
      space = ""
    END
  END

  SECTION "format"
    use "normal"
    zero =  "0"
    positive = "%1i"
    OPTION "normal"
      negative = "−%P"
    END
    OPTION "bracketed negatives"
      negative = "(%P)"
    END
  END
END


# How to print irrational numbers
# 
# radix            : The digits to use
# zero             : How to print the value zero
# group            : The size of digit groups
# space            : The characters to put between groups
# positive_integer : How to print positive values that are integers
# negative_integer : How to print negative values that are integers
# positive_float   : How to print positive values that are not integers
# negative_float   : How to print negative values that are not integers
# 
# %i = integer part
# %f = float part
# %P = as if positive
SETTING irrational
  radix = "0123456789"
  zero = "0"

  SECTION "integer grouping"
    use "spaces between groups of 3"
    OPTION "spaces between groups of 3"
      group[i] = 3
      space[i] = " "
    END
    OPTION "apostrophe between groups of 3"
      group[i] = 3
      space[i] = "'"
    END
    OPTION "comma between groups of 3"
      group[i] = 3
      space[i] = ","
    END
    OPTION "ungrouped"
      group[i] = 0
      space[i] = ""
    END
  END

  SECTION "float grouping"
    use "ungrouped"
    OPTION "spaces between groups of 3"
      group[f] = 3
      space[f] = " "
    END
    OPTION "apostrophe between groups of 3"
      group[f] = 3
      space[f] = "'"
    END
    OPTION "comma between groups of 3"
      group[f] = 3
      space[f] = ","
    END
    OPTION "ungrouped"
      group[f] = 0
      space[f] = ""
    END
  END

  SECTION "negatives"
    use "normal"
    OPTION "normal"
      negative_integer = "−%P"
    END
    OPTION "bracketed"
      negative_float = "(%P)"
    END
  END

  SECTION "format"
    use ""
    OPTION "0,12345"
      positive_integer = "%1i"
      positive_float = "%1i,%{f[5]}"
    END
    OPTION "0.12345"
      positive_integer = "%1i"
      positive_float = "%1i.%{f[5]}"
    END
    OPTION ".12345"
      positive_integer = "%1i"
      positive_float = "%0i.%{f[5]}"
    END
  END
END


# How to print rational numbers
# 
# radix                : The digits to use
# zero                 : How to print the value zero
# group                : The size of digit groups
# space                : The characters to put between groups
# positive_integer     : How to print positive values that are integers
# negative_integer     : How to print negative values that are integers
# positive_float       : How to print positive values that are not integers and not periodic
# negative_float       : How to print negative values that are not integers and not periodic
# positive_periodic    : How to print positive values that are not integers but is periodic
# negative_periodic    : How to print negative values that are not integers but is periodic
# periodic_diacritical : Prefix to each characters in %p
# 
# %i = integer part
# %f = float part
# %F = periodic part as if float part
# %p = periodic part
# %P = as if positive
SETTING rational
  radix = "0123456789"
  zero = "0"

  SECTION "integer grouping"
    use "spaces between groups of 3"
    OPTION "spaces between groups of 3"
      group[i] = 3
      space[i] = " "
    END
    OPTION "apostrophe between groups of 3"
      group[i] = 3
      space[i] = "'"
    END
    OPTION "comma between groups of 3"
      group[i] = 3
      space[i] = ","
    END
    OPTION "ungrouped"
      group[i] = 0
      space[i] = ""
    END
  END

  SECTION "float grouping"
    use "ungrouped"
    OPTION "spaces between groups of 3"
      group[f] = 3
      space[f] = " "
    END
    OPTION "apostrophe between groups of 3"
      group[f] = 3
      space[f] = "'"
    END
    OPTION "comma between groups of 3"
      group[f] = 3
      space[f] = ","
    END
    OPTION "ungrouped"
      group[f] = 0
      space[f] = ""
    END
  END

  SECTION "period grouping"
    use "ungrouped"
    OPTION "spaces between groups of 3"
      group[p] = 3
      space[p] = " "
    END
    OPTION "apostrophe between groups of 3"
      group[p] = 3
      space[p] = "'"
    END
    OPTION "comma between groups of 3"
      group[p] = 3
      space[p] = ","
    END
    OPTION "ungrouped"
      group[p] = 0
      space[p] = ""
    END
  END

  SECTION "negatives"
    use "normal"
    OPTION "normal"
      negative_integer = "−%P"
    END
    OPTION "bracketed"
      negative_float = "(%P)"
    END
  END

  SECTION "format"
    use "0,,3"
    positive_integer = "%1i"
    OPTION "0,33333"
      positive_float = "%1i,%f"
      positive_periodic = "%0i.%f%{F[5]}"
      periodic_diacritical = ""
    END
    OPTION "0.33333"
      positive_float = "%1i.%f"
      positive_periodic = "%0i.%f%{F[5]}"
      periodic_diacritical = ""
    END
    OPTION ".33333"
      positive_float = "%0i.%f"
      positive_periodic = "%0i.%f%{F[5]}"
      periodic_diacritical = ""
    END
    OPTION "0,,3"
      positive_float = "%1i,%f"
      positive_periodic = "%1i,%f.%p"
      periodic_diacritical = ""
    END
    OPTION "0..3"
      positive_float = "%1i.%f"
      positive_periodic = "%1i.%f.%p"
      periodic_diacritical = ""
    END
    OPTION "..3"
      positive_float = "%0i.%f"
      positive_periodic = "%0i.%f.%p"
      periodic_diacritical = ""
    END
    OPTION "0,̇3"
      positive_float = "%1i,%f"
      positive_periodic = "%1i,%f%p"
      periodic_diacritical = "̇"
    END
    OPTION "0.̇3"
      positive_float = "%1i.%f"
      positive_periodic = "%1i.%f%p"
      periodic_diacritical = "̇"
    END
    OPTION ".̇3"
      positive_float = "%0i.%f"
      positive_periodic = "%0i.%f%p"
      periodic_diacritical = "̇"
    END
    OPTION "0,͞3"
      positive_float = "%1i,%f"
      positive_periodic = "%1i,%f%p"
      periodic_diacritical = "̅"
    END
    OPTION "0.͞3"
      positive_float = "%1i.%f"
      positive_periodic = "%1i.%f%p"
      periodic_diacritical = "̅"
    END
    OPTION ".̅3"
      positive_float = "%0i.%f"
      positive_periodic = "%0i.%f%p"
      periodic_diacritical = "̅"
    END
  END
END

